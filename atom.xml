<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员杂碎念</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.pangadam.com/"/>
  <updated>2019-09-28T11:26:24.988Z</updated>
  <id>http://www.pangadam.com/</id>
  
  <author>
    <name>pangadam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试6</title>
    <link href="http://www.pangadam.com/2019/09/28/%E6%B5%8B%E8%AF%956/"/>
    <id>http://www.pangadam.com/2019/09/28/测试6/</id>
    <published>2019-09-28T11:02:22.000Z</published>
    <updated>2019-09-28T11:26:24.988Z</updated>
    
    <content type="html"><![CDATA[<p>不仅简化了 Dubbo 基于 xml 配置的方式，也提高了日常开发效率，甚至提升了工作幸福感。</p><p>为了节省亲爱的读者您的时间，请根据以下2点提示来阅读本文，以提高您的阅读收获效率哦。</p><ul><li><p>如果您只有简单的 Java 基础和 Maven 经验，而不熟悉 Dubbo，本文档将帮助您从零开始使用 Spring Boot 开发 Dubbo 服务，并使用 EDAS 服务注册中心实现服务注册与发现。</p></li><li><p>如果您熟悉 Dubbo，可以选择性地阅读相关章节。</p></li></ul><a id="more"></a><h3 id="为什么使用-Spring-Boot-开发-Dubbo-应用"><a href="#为什么使用-Spring-Boot-开发-Dubbo-应用" class="headerlink" title="为什么使用 Spring Boot 开发 Dubbo 应用"></a>为什么使用 Spring Boot 开发 Dubbo 应用</h3><p>Spring Boot 使用极简的一些配置，就能快速搭建一个基于 Spring 的应用，提高的日常的开发效率。因此，如果您使用 Spring Boot 来开发基于 Dubbo 的应用，简化了 Bubbo 基于 xml 配置的方式，提高了日常开发效率，提升了工作幸福感。</p><h3 id="为什么使用-EDAS-服务注册中心"><a href="#为什么使用-EDAS-服务注册中心" class="headerlink" title="为什么使用 EDAS 服务注册中心"></a>为什么使用 EDAS 服务注册中心</h3><p>EDAS 服务注册中心实现了 Dubbo 所提供的 SPI 标准的<a href="http://dubbo.apache.org/zh-cn/docs/dev/impls/registry.html?spm=a2c4g.11186623.2.13.41344822aqNoSX" target="_blank" rel="noopener">注册中心扩展</a>，能够完整地支持 Dubbo 服务注册、<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/routing-rule.html?spm=a2c4g.11186623.2.14.41344822aqNoSX" target="_blank" rel="noopener">路由规则</a>、<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/config-rule.html?spm=a2c4g.11186623.2.15.41344822aqNoSX" target="_blank" rel="noopener">配置规则功能</a>。</p><p>EDAS 服务注册中心能够完全代替 ZooKeeper 和 Redis，作为您 Dubbo 服务的注册中心。同时，与 ZooKeeper 和 Redis 相比，还具有以下优势：</p><ul><li>EDAS 服务注册中心为共享组件，节省了您运维、部署 ZooKeeper 等组件的机器成本。</li><li>EDAS 服务注册中心在通信过程中增加了鉴权加密功能，为您的服务注册链路进行了安全加固。</li><li>EDAS 服务注册中心与 EDAS 其他组件紧密结合，为您提供一整套的微服务解决方案。</li></ul><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>下载、启动及配置轻量级配置中心。</li></ul><p>为了便于本地开发，EDAS 提供了一个包含了 EDAS 服务注册中心基本功能的轻量级配置中心。基于轻量级配置中心开发的应用无需修改任何代码和配置就可以部署到云端的 EDAS 中。</p><p>请您参考 <a href="https://help.aliyun.com/document_detail/44163.html?spm=a2c4g.11186623.2.17.4fa073571VPegl" target="_blank" rel="noopener">配置轻量级配置中心</a> 进行下载、启动及配置。推荐使用最新版本。</p><ul><li>下载 <a href="http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz?spm=a2c4g.11186623.2.18.4fa073571VPegl&file=apache-maven-3.6.0-bin.tar.gz" target="_blank" rel="noopener">Maven</a> 并设置环境变量（本地已安装的可略过）。</li></ul><h4 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h4><ol><li>创建一个 Spring Boot 工程，命名为 spring-boot-dubbo-provider。</li></ol><p>这里我们以 Spring Boot 2.0.6.RELEASE 为例，在 pom.xml 文件中加入如下内容。</p><p><dependencymanagement>       <dependencies>           <dependency>               <groupid>org.springframework.boot</groupid>               <artifactid>spring-boot-dependencies</artifactid>               <version>2.0.6.RELEASE</version>               <type>pom</type>               <scope>import</scope>           </dependency>       </dependencies>   </dependencymanagement>   <dependencies>       <dependency>           <groupid>org.springframework.boot</groupid>           <artifactid>spring-boot-starter-web</artifactid>       </dependency>       <dependency>           <groupid>org.springframework.boot</groupid>           <artifactid>spring-boot-actuator</artifactid>       </dependency>       <dependency>           <groupid>com.alibaba.boot</groupid>           <artifactid>dubbo-spring-boot-starter</artifactid>           <version>0.2.0</version>       </dependency>       <dependency>           <groupid>com.alibaba.edas</groupid>           <artifactid>edas-dubbo-extension</artifactid>           <version>1.0.0-SNAPSHOT</version>       </dependency>   </dependencies></p><p>如果您需要选择使用 Spring Boot 1.x 的版本，请使用 Spring Boot 1.5.x 版本，对应的 com.alibaba.boot:dubbo-spring-boot-starter 版本为 0.1.0。</p><p><strong>说明：</strong> Spring Boot 1.x 版本的生命周期即将在 2019 年 8 月 结束，推荐使用新版本开发您的应用。</p><p>2.开发 Dubbo 服务提供者</p><p>2.1 Dubbo 中服务都是以接口的形式提供的。因此需要开发一个接口，例如这里的 <strong>IHelloService</strong>，接口里有若干个可被调用的方法，例如这里的 <strong>SayHello</strong> 方法。</p><p><code>package com.alibaba.edas.boot;    public interface IHelloService {    String sayHello(String str);}</code></p><p>2.2 在服务提供方，需要实现所有以接口形式暴露的服务接口。例如这里实现 <strong>IHelloService</strong> 接口的类为 <strong>HelloServiceImpl</strong>。</p><p><code>package com.alibaba.edas.boot;    import com.alibaba.dubbo.config.annotation.Service;        @Service    public class HelloServiceImpl implements IHelloService {            public String sayHello(String name) {            return &quot;Hello, &quot; + name + &quot; (from Dubbo with Spring Boot)&quot;;        }        }    ```                **说明：** 这里的 Service 注解式 Dubbo 提供的一个注解类，类的全名称为：**com.alibaba.dubbo.config.annotation.Service** 。  2.3 配置 Dubbo 服务。在 application.properties/application.yaml 配置文件中新增以下配置：      ```properties    # Base packages to scan Dubbo Components (e.g @Service , @Reference)    dubbo.scan.basePackages=com.alibaba.edas.boot    dubbo.application.name=dubbo-provider-demo    dubbo.registry.address=edas://127.0.0.1:8080    ```            **说明：**     * 以上三个配置没有默认值，必须要给出具体的配置。* dubbo.scan.basePackages 的值是开发的代码中含有 com.alibaba.dubbo.config.annotation.Service 和  com.alibaba.dubbo.config.annotation.Reference 注解所在的包。多个包之间用逗号隔开。* dubbo.registry.address 的值前缀必须是一个 **edas://** 开头，后面的ip地址和端口指的是轻量版配置中心3.开发并启动 Spring Boot 入口类        ```java    package com.alibaba.edas.boot;    import org.springframework.boot.SpringApplication;    import org.springframework.boot.autoconfigure.SpringBootApplication;        @SpringBootApplication    public class DubboProvider {            public static void main(String[] args) {                SpringApplication.run(DubboProvider.class, args);        }        }</code></p><p>4.登录轻量版配置中心控制台 <a href="http://127.0.0.1:8080，在左侧导航栏中单击服务列表/" target="_blank" rel="noopener">http://127.0.0.1:8080，在左侧导航栏中单击服务列表</a> ，查看提供者列表。可以看到服务提供者里已经包含了 com.alibaba.edas.IHelloService，且可以查询该服务的服务分组和提供者 IP。</p><h4 id="创建服务消费者"><a href="#创建服务消费者" class="headerlink" title="创建服务消费者"></a>创建服务消费者</h4><ol><li>创建一个 Spring Boot 工程，命名为 spring-boot-dubbo-</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不仅简化了 Dubbo 基于 xml 配置的方式，也提高了日常开发效率，甚至提升了工作幸福感。&lt;/p&gt;&lt;p&gt;为了节省亲爱的读者您的时间，请根据以下2点提示来阅读本文，以提高您的阅读收获效率哦。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果您只有简单的 Java 基础和 Maven 经验，而不熟悉 Dubbo，本文档将帮助您从零开始使用 Spring Boot 开发 Dubbo 服务，并使用 EDAS 服务注册中心实现服务注册与发现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果您熟悉 Dubbo，可以选择性地阅读相关章节。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="分类测试" scheme="http://www.pangadam.com/categories/%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试6" scheme="http://www.pangadam.com/tags/%E6%B5%8B%E8%AF%956/"/>
    
  </entry>
  
  <entry>
    <title>测试5</title>
    <link href="http://www.pangadam.com/2019/09/28/%E6%B5%8B%E8%AF%955/"/>
    <id>http://www.pangadam.com/2019/09/28/测试5/</id>
    <published>2019-09-28T11:02:17.000Z</published>
    <updated>2019-09-28T11:25:55.552Z</updated>
    
    <content type="html"><![CDATA[<p>开源分布式事务中间件 Fescar 自1月10日上线v0.1版本以来，受到了开发者们的极大关注（watch299，star3604，fork799，社区讨论的issue79，数据统计于1月23日10:12），可见，天下苦分布式事务久矣。</p><p>为此，我们收集了大家在社区（Github）和社群（钉钉群&amp;微信群）关注的核心问题，总结如下，并给出回复。</p><a id="more"></a><p><a href="https://yqfile.alicdn.com/dee72a7b937478be3b692b00424c242d954e1be9.png" target="_blank" rel="noopener"><img src="https://yqfile.alicdn.com/dee72a7b937478be3b692b00424c242d954e1be9.png" alt="_2019_01_17_9_33_47"></a>_2019_01_17_9_33_47</p><blockquote><p>Q1：Fescar 的发展经历了哪些历程？和阿里云全局事务服务GTS之间是什么关系？</p></blockquote><p>A1：阿里巴巴是国内最早一批进行应用分布式（微服务化）改造的企业，所以很早就遇到微服务架构下的分布式事务问题。</p><ul><li>2014 年</li></ul><p>阿里巴巴中间件团队发布TXC（Taobao Transaction Constructor），为集团内应用提供分布式事务服务。</p><ul><li>2016 年</li></ul><p>TXC 经过产品化改造，以GTS（Global TransactionService）的身份上线阿里云，成为当时业界唯一一款云上分布式事务产品，以阿里云公有云或专有云解决方案的形式，交付给众多外部客户。</p><ul><li>2019 年</li></ul><p>基于 TXC 和 GTS 的技术积累，阿里巴巴中间件团队发起了开源项目Fescar（Fast &amp; EaSy Commit And Rollback, FESCAR），和社区一起建设这个分布式事务解决方案。</p><p>TXC/GTS/Fescar一脉相承，为解决微服务架构下的分布式事务问题交出了一份与众不同的答卷。</p><blockquote><p>Q2：Fescar 有哪些适用场景？</p></blockquote><p>A2：Fescar 的愿景是让分布式事务的使用像现在本地事务的使用一样简单、高效，最终的目标是希望可以适用于所有的分布式事务场景。目前，核心的 AT 模式适用于构建于支持本地 ACID 事务的关系型数据库。非关系型数据库类资源的管理，通过 MT 模式来支持。AT 模式与 MT 模式完全兼容，所以可以在同一个分布式事务中，同时管理两类资源。</p><blockquote><p>Q3：目前有已经有一些其他的分布式事务开源方案，Fescar 和他们之间有哪些区别？和JTA支持分布式事务有哪些区别？</p></blockquote><p>A3：既有的分布式事务解决方案按照对业务侵入性分为两类，即：对业务无侵入的和对业务有侵入的。</p><ul><li>业务无侵入的方案</li></ul><p>既有的主流分布式事务解决方案中，对业务无侵入的只有基于 XA 的方案（注：问题中提到的 JTA 是XA 方案的 Java 版本），但应用XA 方案存在 3 个方面的问题：</p><p>1、要求数据库提供对 XA 的支持。如果遇到不支持 XA（或支持得不好，比如 MySQL 5.7 以前的版本）的数据库，则不能使用。</p><p>2、受协议本身的约束，事务资源（数据记录、数据库连接）的锁定周期长。长周期的资源锁定从业务层面来看，往往是不必要的，而因为事务资源的管理器是数据库本身，应用层无法插手。这样形成的局面就是，基于 XA 的应用往往性能会比较差，而且很难优化。</p><p>3、已经落地的基于 XA 的分布式解决方案，都依托于重量级的应用服务器（Tuxedo/WebLogic/WebSphere 等)，这是不适用于微服务架构的。</p><ul><li>侵入业务的方案</li></ul><p>实际上，最初分布式事务只有 XA 这个唯一方案。XA 是完备的，但在实践过程中，由于种种原因（包含但不限于上面提到的3 点）往往不得不放弃，转而从业务层面着手来解决分布式事务问题。比如：</p><ul><li>基于可靠消息的最终一致性方案</li><li>TCC</li><li>Saga</li></ul><p>都属于这一类。这些方案的具体机制在这里不做展开，网上这方面的论述文章非常多。总之，这些方案都要求在应用的业务层面把分布式事务技术约束考虑到设计中，通常每一个服务都需要设计实现正向和反向的幂等接口。这样的设计约束，往往会导致很高的研发和维护成本。</p><p>不可否认，侵入业务的分布式事务方案都经过大量实践验证，能有效解决问题，在各行种业的业务应用系统中起着重要作用。但回到原点来思考，这些方案的采用实际上都是迫于无奈。</p><p>回到问题：</p><p>与基于消息的最终一致、TCC、Saga等业务逻辑侵入方案的不同在于，Fescar 的设计初衷就是保持对业务的非侵入性，不要求业务层面按照分布式事务的特定场景来设计正向和反向的两套（甚至多套）业务逻辑。这方面的差别就不展开了。</p><p>与 XA 的区别在于，设计了一套不同与 XA 的两阶段协议，在保持对业务不侵入的前提下，保证良好的性能，也避免了对底层数据库协议支持的要求。可以看作是一套轻量级的XA 机制。具体的差别如下：</p><ul><li>架构层次</li></ul><p><a href="https://yqfile.alicdn.com/9b2f10748d299633e081caadabf1c24f772bfa56.png" target="_blank" rel="noopener"><img src="https://yqfile.alicdn.com/9b2f10748d299633e081caadabf1c24f772bfa56.png" alt="fescar"></a>fescar</p><p>XA方案的 RM 实际上是在数据库层，RM本质上就是数据库自身（通过提供支持 XA 的驱动程序来供应用使用）。</p><p>而 Fescar 的RM 是以二方包的形式作为中间件层部署在应用程序这一侧的，不依赖与数据库本身对协议的支持，当然也不需要数据库支持XA 协议。这点对于微服务化的架构来说是非常重要的：应用层不需要为本地事务和分布式事务两类不同场景来适配两套不同的数据库驱动。</p><p>这个设计，剥离了分布式事务方案对数据库在协议支持上的要求。</p><ul><li>两阶段提交</li></ul><p>先来看一下 XA 的2PC 过程。</p><p><a href="https://yqfile.alicdn.com/c14f6b3c415247d72bd320752ac32c9600062843.png" target="_blank" rel="noopener"><img src="https://yqfile.alicdn.com/c14f6b3c415247d72bd320752ac32c9600062843.png" alt="fescar2"></a>fescar2</p><p>无论 Phase2 的决议是commit 还是 rollback，事务性资源的锁都要保持到Phase2 完成才释放。</p><p>再看 Fescar 的2PC 过程。</p><p><a href="https://yqfile.alicdn.com/3b0a2b888fac54dee34840f5cf6f3db2dad74504.png" target="_blank" rel="noopener"><img src="https://yqfile.alicdn.com/3b0a2b888fac54dee34840f5cf6f3db2dad74504.png" alt="fescar3"></a>fescar3</p><p>分支事务中数据的 本地锁 由本地事务管理，在分支事务 Phase1 结束时释放。</p><p>同时，随着本地事务结束，连接 也得以释放。</p><p>分支事务中数据的 全局锁 在事务协调器侧管理，在决议 Phase2 全局提交时，全局锁马上</p><p>可以释放。只有在决议全局回滚的情况下，全局锁 才被持有至分支的 Phase2 结束。</p><p>这个设计，极大地减少了分支事务对资源（数据和连接）的锁定时间，给整体并发和吞吐的提升提供了基础。</p><blockquote><p>Q4：Fescar 支持 Dubbo 的哪些版本？</p></blockquote><p>A4：所有版本。</p><blockquote><p>Q5：Fescar 支持 Spring Cloud么？</p></blockquote><p>A5：Fescar 与微服务框架的接口点在于，需要把事务的唯一标识 XID（一个字符串）通过微服务框架的服务调用间调用的机制中，透明地传递，并通过 Fescar 的 API 来绑定（或解绑）到应用的线程上下文中。（机制可以参考内置的对 Dubbo 支持的实现 com.alibaba.fescar.dubbo.TransactionPropagationFilter）所以，本质上这个问题不是支不支持 Spring Cloud，而是如何支持 Spring Cloud 中选用的服务调用机制。目前正在和 Spring Cloud Alibaba 的同学合作，准备在v0.5.x版本（或更早）发布对 Spring Cloud默认的支持。同时，非常欢迎社区的朋友参与进来，贡献包括 Spring Cloud 在内的各类微服务框架的支持。</p><blockquote><p>Q6：Fescar 是否支持本地跨库多数据源？除了关系型数据库，是否还支持NoSQL数据库？</p></blockquote><p>A6：本地跨多数据源同样是支持的，在 Fescar 的架构中，同一个服务中的多个数据源与跨服务的多个数据源，没有本质区别。AT 模式目前仅限于对关系型数据库的支持（本身具备ACID 事务支持），后面会发布出来的 MT 模式可以支持 NoSQL 这类本身不具备本地事务支持的资源。</p><blockquote><p>Q7：Fescar 现在开源的是AT模式，MT模式暂时不支持，什么时候会开源？</p></blockquote><p>A7：当前 0.1.0 版本只是把 Fescar 最核心的 AT 模式的最小集发布出来，一方面是按开源的规划和架构的重构进展，另一方面也是希望通过最小集版本，让用户和开发者社区更容易理解到我们核心的设计思路，让更多人比较容易地参与进来建设，而不是完全由阿里巴巴主导，仅仅把我们的整套</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开源分布式事务中间件 Fescar 自1月10日上线v0.1版本以来，受到了开发者们的极大关注（watch299，star3604，fork799，社区讨论的issue79，数据统计于1月23日10:12），可见，天下苦分布式事务久矣。&lt;/p&gt;&lt;p&gt;为此，我们收集了大家在社区（Github）和社群（钉钉群&amp;amp;微信群）关注的核心问题，总结如下，并给出回复。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分类测试" scheme="http://www.pangadam.com/categories/%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试5" scheme="http://www.pangadam.com/tags/%E6%B5%8B%E8%AF%955/"/>
    
  </entry>
  
  <entry>
    <title>测试4</title>
    <link href="http://www.pangadam.com/2019/09/28/%E6%B5%8B%E8%AF%954/"/>
    <id>http://www.pangadam.com/2019/09/28/测试4/</id>
    <published>2019-09-28T11:02:13.000Z</published>
    <updated>2019-09-28T11:25:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>减少故障的最好方法就是让故障经常性的发生。通过不断重复失败过程，持续提升系统的容错和弹性能力。</p><p>那么，实施一次高效的混沌工程实验，需要几步呢？</p><p>答案：2 步。</p><p>① 登陆</p><p><a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener">https://github.com/chaosblade-io/chaosblade</a></p><p>② 下载 release 版本，打造故障演练专属工具</p><p>- 正文开始 -</p><a id="more"></a><p>高可用架构是保障服务稳定性的核心。</p><p>阿里巴巴在海量互联网服务以及历年双11场景的实践过程中，沉淀出了包括全链路压测、线上流量管控、故障演练等高可用核心技术，并通过开源和云上服务的形式对外输出，以帮助企业用户和开发者享受阿里巴巴的技术红利，提高开发效率，缩短业务的构建流程。</p><p>例如，借助阿里云性能测试 PTS，高效率构建全链路压测体系，通过开源组件 Sentinel 实现限流和降级功能。这一次，经历了 6 年时间的改进和实践，累计在线上执行演练场景达数万次，我们将阿里巴巴在故障演练领域的创意和实践，浓缩成一个混沌工程工具，并将其开源，命名为 ChaosBlade。</p><h2 id="ChaosBlade-是什么"><a href="#ChaosBlade-是什么" class="headerlink" title="ChaosBlade 是什么"></a>ChaosBlade 是什么</h2><p>ChaosBlade 是一款遵循混沌工程实验原理，提供丰富故障场景实现，帮助分布式系统提升容错性和可恢复性的混沌工程工具，可实现底层故障的注入，特点是操作简洁、无侵入、扩展性强。</p><p>ChaosBlade 基于 Apache License v2.0 开源协议，目前有 chaosblade 和 chaosblade-exe-jvm 两个仓库。</p><p>chaosblade 包含 CLI 和使用 Golang 实现的基础资源、容器相关的混沌实验实施执行模块。chaosblade-exe-jvm 是对运行在 JVM 上的应用实施混沌实验的执行器。</p><p>ChaosBlade 社区后续还会添加 C++、Node.js 等其他语言的混沌实验执行器。</p><p>更多内容，参见项目及 Demo 体验地址：</p><p><a href="https://github.com/chaosblade-io" target="_blank" rel="noopener">https://github.com/chaosblade-io</a></p><h2 id="为什么要开源"><a href="#为什么要开源" class="headerlink" title="为什么要开源"></a>为什么要开源</h2><p>很多公司已经开始关注并探索混沌工程，渐渐成为测试系统高可用，构建对系统信息不可缺少的工具。但混沌工程领域目前还处于一个快速演进的阶段，最佳实践和工具框架没有统一标准。实施混沌工程可能会带来一些潜在的业务风险，经验和工具的缺失也将进一步阻止 DevOps 人员实施混沌工程。</p><p>混沌工程领域目前也有很多优秀的开源工具，分别覆盖某个领域，但这些工具的使用方式千差万别，其中有些工具上手难度大，学习成本高，混沌实验能力单一，使很多人对混沌工程领域望而却步。</p><p>阿里巴巴集团在混沌工程领域已经实践多年，将混沌实验工具 ChaosBlade 开源目的，是为了：</p><ul><li>让更多人了解并加入到混沌工程领域；</li><li>缩短构建混沌工程的路径；</li><li>同时依靠社区的力量，完善更多的混沌实验场景，共同推进混沌工程领域的发展。</li></ul><h2 id="ChaosBlade-能解决哪些问题"><a href="#ChaosBlade-能解决哪些问题" class="headerlink" title="ChaosBlade 能解决哪些问题"></a>ChaosBlade 能解决哪些问题</h2><h3 id="衡量微服务的容错能力"><a href="#衡量微服务的容错能力" class="headerlink" title="衡量微服务的容错能力"></a>衡量微服务的容错能力</h3><p>通过模拟调用延迟、服务不可用、机器资源满载等，查看发生故障的节点或实例是否被自动隔离、下线，流量调度是否正确，预案是否有效，同时观察系统整体的 QPS 或 RT 是否受影响。在此基础上可以缓慢增加故障节点范围，验证上游服务限流降级、熔断等是否有效。最终故障节点增加到请求服务超时，估算系统容错红线，衡量系统容错能力。</p><h3 id="验证容器编排配置是否合理"><a href="#验证容器编排配置是否合理" class="headerlink" title="验证容器编排配置是否合理"></a>验证容器编排配置是否合理</h3><p>通过模拟杀服务 Pod、杀节点、增大 Pod 资源负载，观察系统服务可用性，验证副本配置、资源限制配置以及 Pod 下部署的容器是否合理。</p><h3 id="测试-PaaS-层是否健壮"><a href="#测试-PaaS-层是否健壮" class="headerlink" title="测试 PaaS 层是否健壮"></a>测试 PaaS 层是否健壮</h3><p>通过模拟上层资源负载，验证调度系统的有效性；模拟依赖的分布式存储不可用，验证系统的容错能力；模拟调度节点不可用，测试调度任务是否自动迁移到可用节点；模拟主备节点故障，测试主备切换是否正常。</p><h3 id="验证监控告警的时效性"><a href="#验证监控告警的时效性" class="headerlink" title="验证监控告警的时效性"></a>验证监控告警的时效性</h3><p>通过对系统注入故障，验证监控指标是否准确，监控维度是否完善，告警阈值是否合理，告警是否快速，告警接收人是否正确，通知渠道是否可用等，提升监控告警的准确和时效性。</p><h3 id="定位与解决问题的应急能力"><a href="#定位与解决问题的应急能力" class="headerlink" title="定位与解决问题的应急能力"></a>定位与解决问题的应急能力</h3><p>通过故障突袭，随机对系统注入故障，考察相关人员对问题的应急能力，以及问题上报、处理流程是否合理，达到以战养战，锻炼人定位与解决问题的能力。</p><h2 id="功能和特点"><a href="#功能和特点" class="headerlink" title="功能和特点"></a>功能和特点</h2><h3 id="场景丰富度高"><a href="#场景丰富度高" class="headerlink" title="场景丰富度高"></a>场景丰富度高</h3><p>ChaosBlade 支持的混沌实验场景不仅覆盖基础资源，如 CPU 满载、磁盘 IO 高、网络延迟等，还包括运行在 JVM 上的应用实验场景，如 Dubbo 调用超时和调用异常、指定方法延迟或抛异常以及返回特定值等，同时涉及容器相关的实验，如杀容器、杀 Pod。后续会持续的增加实验场景。</p><h3 id="使用简洁，易于理解"><a href="#使用简洁，易于理解" class="headerlink" title="使用简洁，易于理解"></a>使用简洁，易于理解</h3><p>ChaosBlade 通过 CLI 方式执行，具有友好的命令提示功能，可以简单快速的上手使用。命令的书写遵循阿里巴巴集团内多年故障测试和演练实践抽象出的故障注入模型，层次清晰，易于阅读和理解，降低了混沌工程实施的门槛。</p><h3 id="场景扩展方便"><a href="#场景扩展方便" class="headerlink" title="场景扩展方便"></a>场景扩展方便</h3><p>所有的 ChaosBlade 实验执行器同样遵循上述提到的故障注入模型，使实验场景模型统一，便于开发和维护。模型本身通俗易懂，学习成本低，可以依据模型方便快捷的扩展更多的混沌实验场景。</p><h2 id="ChaosBlade-的演进史"><a href="#ChaosBlade-的演进史" class="headerlink" title="ChaosBlade 的演进史"></a>ChaosBlade 的演进史</h2><ul><li>EOS（2012-2015）：</li></ul><p>故障演练平台的早期版本，故障注入能力通过字节码增强方式实现，模拟常见的 RPC 故障，解决微服务的强弱依赖治理问题。</p><ul><li>MonkeyKing（2016-2018）：</li></ul><p>故障演练平台的升级版本，丰富了故障场景（如：资源、容器层场景），开始在生产环境进行一些规模化的演练。</p><ul><li>AHAS（2018.9-至今）：</li></ul><p>阿里云应用高可用服务，内置演练平台的全部功能，支持可编排演练、演练插件扩展等能力，并整合了架构感知和限流降级的功能。</p><ul><li>ChaosBlade（2019.3）：</li></ul><p>是 MonkeyKing 平台底层故障注入的实现工具，通过对演练平台底层的故障注入能力进行抽象，定义了一套故障模型。配合用户友好的 CLI 工具进行开源，帮助云原生用户进行混沌工程测试。</p><h2 id="近期规划"><a href="#近期规划" class="headerlink" title="近期规划"></a>近期规划</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;减少故障的最好方法就是让故障经常性的发生。通过不断重复失败过程，持续提升系统的容错和弹性能力。&lt;/p&gt;&lt;p&gt;那么，实施一次高效的混沌工程实验，需要几步呢？&lt;/p&gt;&lt;p&gt;答案：2 步。&lt;/p&gt;&lt;p&gt;① 登陆&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/chaosblade-io/chaosblade&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/chaosblade-io/chaosblade&lt;/a&gt;&lt;/p&gt;&lt;p&gt;② 下载 release 版本，打造故障演练专属工具&lt;/p&gt;&lt;p&gt;- 正文开始 -&lt;/p&gt;
    
    </summary>
    
    
      <category term="分类测试" scheme="http://www.pangadam.com/categories/%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试4" scheme="http://www.pangadam.com/tags/%E6%B5%8B%E8%AF%954/"/>
    
  </entry>
  
  <entry>
    <title>测试3</title>
    <link href="http://www.pangadam.com/2019/09/28/%E6%B5%8B%E8%AF%953/"/>
    <id>http://www.pangadam.com/2019/09/28/测试3/</id>
    <published>2019-09-28T11:02:08.000Z</published>
    <updated>2019-09-28T11:25:01.615Z</updated>
    
    <content type="html"><![CDATA[<p>自从我们团队在去年12月发布 <a href="https://www.aliyun.com/product/cloudtoolkit?spm=5176.12825654.h2v3icoap.375.1c7b2c4a8dETAg" target="_blank" rel="noopener"><strong>Cloud Toolkit</strong></a>（一款让开发部署效率提速 8 倍的 IDE 插件）以来，已帮助数以万计的开发者们提高了云上的部署效率，期间，开发者们不仅积极地向 Cloud Toolkit 团队提出需求及优化建议，而且还热心地帮助别人进行答疑解惑。</p><p><a href="https://img.alicdn.com/tfs/TB1lA5edvWG3KVjSZFgXXbTspXa-969-362.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1lA5edvWG3KVjSZFgXXbTspXa-969-362.png" alt="img"></a><br><a href="https://www.aliyun.com/product/cloudtoolkit?spm=5176.12825654.h2v3icoap.375.1c7b2c4a8dETAg" target="_blank" rel="noopener">点击，了解更多，加入创造</a></p><p>您的贡献类别包括但不限于以下形式：- 在钉钉或微信交流群里，热心帮助别答疑解惑- 提出新特性需求，并被采纳- 提出优化和改进建议，并被采纳- 上报 Bug，并被采纳- 推广插件，包括发朋友圈、发表文章、推荐给朋友等- 参与测评活动等等</p><a id="more"></a><p>## 创始人计划</p><p><strong>100**</strong>永久列入<strong><strong>永久记录</strong></strong>更大参与权益**<br>## 双周排行榜</p><p><a href="https://img.alicdn.com/tfs/TB1Mn1ldBCw3KVjSZFlXXcJkFXa-623-479.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1Mn1ldBCw3KVjSZFlXXcJkFXa-623-479.png" alt="img"></a></p><p>不仅如此，对于每两周贡献值排名前三的开发者，也进行同样的，还有喔～不管您在任何阶段参与贡献，都有机会荣登阿里云官网排行榜，我们诚邀您参与创造。</p><p><a href="https://jinshuju.net/f/P44tcE" target="_blank" rel="noopener">测评活动入口在此，即刻点击发声。</a><br><a href="https://jinshuju.net/f/QHeWPh" target="_blank" rel="noopener">点击参与</a></p><p><a href="http://img.alicdn.com/tfs/TB1ZqxHswHqK1RjSZJnXXbNLpXa-258-258.jpg" target="_blank" rel="noopener"><img src="http://img.alicdn.com/tfs/TB1ZqxHswHqK1RjSZJnXXbNLpXa-258-258.jpg" alt="img"></a></p><p>阿里巴巴中间件官方公众号</p><p>后续更新的活动都会发布在这里，如果您想第一时间了解最新活动详情、活动的动态、奖励机制，请记得要 mark 住我们的<a href="https://www.aliyun.com/product/cloudtoolkit?spm=5176.12825654.h2v3icoap.375.1c7b2c4a8dETAg" target="_blank" rel="noopener">官网</a>和<a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MzU4NzU0MDIzOQ==&scene=124#wechat_redirect" target="_blank" rel="noopener">公众号</a>哦！此文章将持续不断地更新和记录排行榜信息，了解往期的排行榜详情，请往下看。</p><p>现在就加入【创造 Cloud Toolkit】，创造一款真正属于开发者的工具</p><p>您的任何建议、解答、需求都将有可能汇入这款工具的血液</p><p>您的任何参与、发声、见解都将有可能注入这款工具的灵魂</p><p>再也不要让工具左右你，现在我们要你定义自己的工具！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从我们团队在去年12月发布 &lt;a href=&quot;https://www.aliyun.com/product/cloudtoolkit?spm=5176.12825654.h2v3icoap.375.1c7b2c4a8dETAg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Cloud Toolkit&lt;/strong&gt;&lt;/a&gt;（一款让开发部署效率提速 8 倍的 IDE 插件）以来，已帮助数以万计的开发者们提高了云上的部署效率，期间，开发者们不仅积极地向 Cloud Toolkit 团队提出需求及优化建议，而且还热心地帮助别人进行答疑解惑。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://img.alicdn.com/tfs/TB1lA5edvWG3KVjSZFgXXbTspXa-969-362.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1lA5edvWG3KVjSZFgXXbTspXa-969-362.png&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.aliyun.com/product/cloudtoolkit?spm=5176.12825654.h2v3icoap.375.1c7b2c4a8dETAg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击，了解更多，加入创造&lt;/a&gt;&lt;/p&gt;&lt;p&gt;您的贡献类别包括但不限于以下形式：- 在钉钉或微信交流群里，热心帮助别答疑解惑- 提出新特性需求，并被采纳- 提出优化和改进建议，并被采纳- 上报 Bug，并被采纳- 推广插件，包括发朋友圈、发表文章、推荐给朋友等- 参与测评活动等等&lt;/p&gt;
    
    </summary>
    
    
      <category term="分类测试" scheme="http://www.pangadam.com/categories/%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试3" scheme="http://www.pangadam.com/tags/%E6%B5%8B%E8%AF%953/"/>
    
  </entry>
  
  <entry>
    <title>测试2</title>
    <link href="http://www.pangadam.com/2019/09/28/%E6%B5%8B%E8%AF%952/"/>
    <id>http://www.pangadam.com/2019/09/28/测试2/</id>
    <published>2019-09-28T11:02:04.000Z</published>
    <updated>2019-09-28T11:24:18.581Z</updated>
    
    <content type="html"><![CDATA[<p>如何像参与开源那样，去参与一款 IDE 插件的设计？</p><p>作为一款 IDE 插件的使用者，我是否能决定下一个版本的功能？</p><p><a href="https://img.alicdn.com/tfs/TB1B8fRebus3KVjSZKbXXXqkFXa-4032-3024.jpg" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1B8fRebus3KVjSZKbXXXqkFXa-4032-3024.jpg" alt="img"></a></p><p>自从产品经理银时小伙和他的开发小哥们在去年12月发布 <a href="https://cn.aliyun.com/product/cloudtoolkit?spm=5176.8142029.developerService.12.4cf36d3e6GiMCs" target="_blank" rel="noopener">Cloud Toolkit</a>（一款 IDE 插件）以来，已帮助数以万计的开发者们提高了业务的部署效率。期间，开发者们不仅是 Cloud Toolkit 的使用者，同时也作为设计者参与了插件的更新迭代。</p><a id="more"></a><p>本文来自开发者徐靖峰，分享了他和 Cloud Toolkit 的故事</p><h2 id="遇见-Cloud-Toolkit"><a href="#遇见-Cloud-Toolkit" class="headerlink" title="遇见 Cloud Toolkit"></a>遇见 Cloud Toolkit</h2><p>在与中间件小姐姐的一次聊天中，偶然间了解到这款插件，小姐姐跟我提到自己正在运营一款 IDE 开发者工具，能够使开发部署效率提高 8 倍，出于好奇心，我就上手体验了一下，看看究竟是一个什么样的产品。使用了一段时间之后，便迫不及待地向小姐姐分享了我作为开发者对插件的一些看法。</p><p>我对这款产品最直观的感受：这是一款发布工具，帮助用户在 IDE 中直接打包应用并部署到各种终端。一开始看到这款产品位于阿里云的页面中，原本以为是一款和阿里云服务强绑定的产品，但试用过后才发现，即使对于普通的云主机，也非常适用，还可以解决很多开发运维的痛点，非阿里云用户可以放心使用。</p><h2 id="在-Cloud-Toolkit-出现之前"><a href="#在-Cloud-Toolkit-出现之前" class="headerlink" title="在 Cloud Toolkit 出现之前"></a>在 Cloud Toolkit 出现之前</h2><p>作为一个 Java 程序员，我们大多数会在 Intellij IDEA 中基于 SpringBoot 来开发 WEB 应用，所以本文中的测评将会基于以下几个架构来构建：</p><ul><li>开发环境：IDEA</li><li>项目组织方式：Maven</li><li>开发框架：SpringBoot</li></ul><p>在接触 Cloud Toolkit 之前，用什么方法来部署一个 SpringBoot 应用呢？作为一个偏正经的测评人员，我不会为了凸显出 Cloud Toolkit 的强大而去翻出一些上古的部署工具来做对比，而是直接使用 Intellij IDEA 的内置功能与之对比。</p><h3 id="第一步：配置服务器信息"><a href="#第一步：配置服务器信息" class="headerlink" title="第一步：配置服务器信息"></a>第一步：配置服务器信息</h3><p><a href="http://kirito.iocoder.cn/image-20190602181059808.png" target="_blank" rel="noopener"><img src="http://kirito.iocoder.cn/image-20190602181059808.png" alt="Deployment 插件"></a>Deployment 插件</p><p>在 <code>Tools -&gt; Deployment</code> 中找到 IDEA 对项目部署支持的内置插件，我们可以在其中进行服务器信息的配置，包括服务器地址和权限认证，并且在 Mapping 选项卡中完成本地工程与服务器路径的映射。</p><h3 id="第二步：配置-Maven-打包插件"><a href="#第二步：配置-Maven-打包插件" class="headerlink" title="第二步：配置 Maven 打包插件"></a>第二步：配置 Maven 打包插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>由于是 SpringBoot 应用，配置专用的打包插件后，可以将整个工程打成一个 fatjar，示例工程非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication@RestControllerpublic class Application &#123;    public static void main(String[] args) &#123;        SpringApplication.run(Application.class, args);    &#125;    @RequestMapping(&quot;/hello&quot;)    public String hello() &#123;        return &quot;hello world~~~~~~~~~~~~~~~~&quot;;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>之后，只要执行 install，即可得到一个可运行的 jar 包：</p><p><a href="http://kirito.iocoder.cn/image-20190602181758619.png" target="_blank" rel="noopener"><img src="http://kirito.iocoder.cn/image-20190602181758619.png" alt="打包"></a>打包</p><h3 id="第三步：部署-jar-包"><a href="#第三步：部署-jar-包" class="headerlink" title="第三步：部署 jar 包"></a>第三步：部署 jar 包</h3><p><a href="http://kirito.iocoder.cn/image-20190602181934176.png" target="_blank" rel="noopener"><img src="http://kirito.iocoder.cn/image-20190602181934176.png" alt="部署"></a>部署</p><p>由于我们在第一步已经配置过项目路径与服务器路径的映射，可以选择直接对 fatjar 右键，upload 到远程服务器上。</p><h3 id="第四步：启动应用"><a href="#第四步：启动应用" class="headerlink" title="第四步：启动应用"></a>第四步：启动应用</h3><p><a href="http://kirito.iocoder.cn/image-20190602182411907.png" target="_blank" rel="noopener"><img src="http://kirito.iocoder.cn/image-20190602182411907.png" alt="启动"></a>启动</p><p>上图中展示的是 IDEA 中两个非常棒的内置功能，可以在 <code>Tools -&gt; Start SSH session</code> 中开启远程服务器的终端，在 IDEA 下方可以执行远程指令；也可以在 <code>Tools -&gt; Deployment -&gt;Browse Remote Host</code> 中展开如图右侧的结构，可视化地浏览服务器上的文件列表，检查应用是否部署成功。</p><p>在远程终端中，找到对应的 fatjar，执行 <code>java -jar spring-demo-1.0-SNAPSHOT.jar</code> 便完成了整个部署流程。</p><h3 id="IDEA-内置插件总结"><a href="#IDEA-内置插件总结" class="headerlink" title="IDEA 内置插件总结"></a>IDEA 内置插件总结</h3><p>IDEA 内置插件已经提供了相当强大的能力，整个部署过程我们完全没有离开 IDEA！避免了频繁切换窗口，装各种部署工具，可以说已经很方便了，Cloud Toolkit 必须要比这个部署过程做的更加强大才行，那下面就让我们来体验下 Cloud Toolkit 是怎么优化的吧。</p><h2 id="Cloud-Toolkit-初体验"><a href="#Cloud-Toolkit-初体验" class="headerlink" title="Cloud Toolkit 初体验"></a>Cloud Toolkit 初体验</h2><p>我们不急着用 Cloud Toolkit 来部署应用。虽然笔者是一位开发者，但还是从产品的角度来研究下它的菜单项，看看它的产品定位。IDEA 安装插件的过程省略，详情可以参考<a href="https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&mid=2247485842&idx=1&sn=18489e421ddc25b5cc38ca2283836687&chksm=fdeb3bf2ca9cb2e451e20359b5b29347d1389736eed336813eb222cc921a1ccee1c95b34855d&token=2133191254&lang=zh_CN#rd" target="_blank" rel="noopener">《IDE 插件新版发布 | 支持更多场景，开发效率更“biu”了》</a>。</p><p><a href="http://kirito.iocoder.cn/image-20190602183827891.png" target="_blank" rel="noopener"><img src="http://kirito.iocoder.cn/image-20190602183827891.png" alt="多种部署方式"></a>多种部署方式</p><p>其他菜单项暂且抛到一边，这 5 个核心能力应该就是 Cloud Toolkit 的核心了。</p><p>即使作为一个插件小白，应该也能够望名知意，猜到这几个菜单对应的功能：</p><ul><li>Deploy to Host：部署到任意服务器。这一个功能决定了 Cloud Toolkit 强大的之处就是可以使得每个开发者受益，它其实并不是和阿里云厂商强绑定的。我会在下文重点测评下这个功能。</li><li>Deploy to ECS：这里的 ECS 指的阿里云的 ECS，如果你的服务部署在阿里云 ECS 上，可以选择使用这个功能，获得比 Deploy to Host 更加丰富的功能。在下文我也会简单测评下这个功能。</li><li>Deploy to EDAS &amp; EDAS Serverless：EDAS &amp; EDAS Serverless 是阿里云提供的分布式服务治理服务，可以理解为商业版的 Dubbo，具有强大的服务治理、服务调度能力，Cloud Toolkit 对 EDAS 做了个性化的部署支持，让使用者无需登录控制台，在 IDEA 中即可完成 EDAS 的部署。</li><li>Deploy to CS K8S：在云原生时代，很多应用使用容器化的方式进行部署，Cloud Toolkit 这一点做的还是不错的，已经具备了容器化部署的能力，具有一定的前瞻性。</li></ul><p>其实从简单的功能介绍就可以看出，Cloud Toolkit 相比 IDEA 内置的部署能力的确是高出一大截了，甚至可以说，Deploy to Host 这一能力完全就可以覆盖 IDEA 插件的所有能力，并且对流程还进行了一些简化。下面我重点测评下 Deploy to Host 这一能力，与之前的部署流程进行一个对比。</p><h2 id="使用-Cloud-Toolkit-把应用部署到任意服务器"><a href="#使用-Cloud-Toolkit-把应用部署到任意服务器" class="headerlink" title="使用 Cloud Toolkit 把应用部署到任意服务器"></a>使用 Cloud Toolkit 把应用部署到任意服务器</h2><p><a href="http://kirito.iocoder.cn/image-20190602185551351.png" target="_blank" rel="noopener"><img src="http://kirito.iocoder.cn/image-20190602185551351.png" alt="Deploy to Host"></a>Deploy to Host</p><p>上图展示的 Deploy to Host 功能的配置项，实际上涵盖了以下几点：</p><ul><li>远程服务器配置</li><li>部署方式：Maven 构建，直接上传文件（目前还不支持 Gradle 构建，可能在后续的版本会支持）</li><li>本地文件与服务器路径的映射配置</li><li>启动脚本的集成</li></ul><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><p>SSH 登录账户可以在 <code>Preferences -&gt; Alibaba Cloud Toolkit -&gt; SSH Profile</code> 中管理，找不到也没关系，需要设置的时候一般都会有超链接跳转，这点做得很人性化。</p><p><a href="http://kirito.iocoder.cn/image-20190602190651881.png" target="_blank" rel="noopener"><img src="http://kirito.iocoder.cn/image-20190602190651881.png" alt="SSH 账号管理"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何像参与开源那样，去参与一款 IDE 插件的设计？&lt;/p&gt;&lt;p&gt;作为一款 IDE 插件的使用者，我是否能决定下一个版本的功能？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://img.alicdn.com/tfs/TB1B8fRebus3KVjSZKbXXXqkFXa-4032-3024.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1B8fRebus3KVjSZKbXXXqkFXa-4032-3024.jpg&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;自从产品经理银时小伙和他的开发小哥们在去年12月发布 &lt;a href=&quot;https://cn.aliyun.com/product/cloudtoolkit?spm=5176.8142029.developerService.12.4cf36d3e6GiMCs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cloud Toolkit&lt;/a&gt;（一款 IDE 插件）以来，已帮助数以万计的开发者们提高了业务的部署效率。期间，开发者们不仅是 Cloud Toolkit 的使用者，同时也作为设计者参与了插件的更新迭代。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分类测试" scheme="http://www.pangadam.com/categories/%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试2" scheme="http://www.pangadam.com/tags/%E6%B5%8B%E8%AF%952/"/>
    
  </entry>
  
  <entry>
    <title>测试1</title>
    <link href="http://www.pangadam.com/2019/09/28/%E6%B5%8B%E8%AF%951/"/>
    <id>http://www.pangadam.com/2019/09/28/测试1/</id>
    <published>2019-09-28T11:01:59.000Z</published>
    <updated>2019-09-28T11:23:49.747Z</updated>
    
    <content type="html"><![CDATA[<p>这一次，在最新的版本中，插件热情牵手了全国受欢迎的开源社区 Apache Dubbo，支持快速创建 RPC 框架 Dubbo 项目工程，并且将 Dubbo 应用快速部署到 EDAS（一个应用托管和微服务管理的PaaS平台） 上，同时支持本地服务和部署在 EDAS 上的服务之间互相调用。希望插件在拥抱开源的路上，服务好更多的开发者。</p><a id="more"></a><p>7月22日晚上 8：00-9：00，中间件小姐姐软萌音直播，让你开发部署提速 8 倍！<br><a href="https://yq.aliyun.com/live/1212" target="_blank" rel="noopener">点击进入直播间</a></p><p>自从产品经理银时小伙和他的团队在去年11月发布 <a href="https://cn.aliyun.com/product/cloudtoolkit?spm=5176.8142029.developerService.12.4cf36d3e6GiMCs" target="_blank" rel="noopener"><strong>Cloud Toolkit</strong></a>（一款 IDE 插件）以来，已帮助数以万计的开发者们提高了开发、测试、诊断以及应用部署效率。期间，他们还发布了 Contributor Ranking List，和开发者们一同定义、打造好用的 IDE 插件。</p><p>下文将为大家演示如何利用 Cloud Toolkit 快速创建 Apache Dubbo 工程，以及运行并验证这个样例工程的可执行性。</p><h2 id="如何安装-cloud-Toolkit-插件"><a href="#如何安装-cloud-Toolkit-插件" class="headerlink" title="如何安装 cloud Toolkit 插件"></a>如何安装 cloud Toolkit 插件</h2><p><a href="https://img.alicdn.com/tfs/TB1ya5zXHj1gK0jSZFOXXc7GpXa-1012-701.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1ya5zXHj1gK0jSZFOXXc7GpXa-1012-701.png" alt="img"></a></p><p>本文使用 IntelliJ IDEA 在 MAC 下进行安装：</p><ol><li>打开 IntelliJ IDEA -&gt; Preference，在弹出的框里面选择插件；</li><li>在输入框中输入 <code>Alibaba Cloud Toolkit</code>；</li><li>在搜索结果中点击安装；</li></ol><blockquote><p>由于网络原因，可能会出现搜索不到的情况，请多尝试几次，或使用离线安装包进行下载。（点击“阅读原文”，免费下载）</p></blockquote><p>安装完毕，重启 IntelliJ IDEA，再次访问 Preference, 可以看到左侧菜单出现了 Alibaba Cloud Toolkit，在已安装的插件里面也能找到。</p><p><a href="https://img.alicdn.com/tfs/TB1LOOzXRr0gK0jSZFnXXbRRXXa-1012-701.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1LOOzXRr0gK0jSZFnXXbRRXXa-1012-701.png" alt="img"></a></p><h2 id="如何创建-Apache-Dubbo-工程"><a href="#如何创建-Apache-Dubbo-工程" class="headerlink" title="如何创建 Apache Dubbo 工程"></a>如何创建 Apache Dubbo 工程</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p><a href="https://img.alicdn.com/tfs/TB1xMCxXQP2gK0jSZPxXXacQpXa-805-590.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1xMCxXQP2gK0jSZPxXXacQpXa-805-590.png" alt="img"></a></p><ol><li>打开 File -&gt; New -&gt; Project；</li><li>在弹出的对话框中选择 Apache Dubbo；</li><li>选择对应的 JDK 版本；</li><li>点击 next；</li></ol><h3 id="设置工程基本配置"><a href="#设置工程基本配置" class="headerlink" title="设置工程基本配置"></a>设置工程基本配置</h3><p><a href="https://img.alicdn.com/tfs/TB1BPiyXNv1gK0jSZFFXXb0sXXa-805-590.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1BPiyXNv1gK0jSZFFXXb0sXXa-805-590.png" alt="img"></a></p><ol><li>选择 maven 项目；</li><li>输入相应的 groupID，例如 com.dubbo.example；</li><li>输入 ArtifactId，例如 dubbo-demo；</li><li>输入 Version，例如 1.0-SNAPSHOT；</li><li>选择 Dubbo 的版本，例如 2.7.2；</li><li>勾选要创建的种类，勾选 Consumer 和 Provider，则会相应创建出服务提供者和服务消费者的代码；</li><li>选择 Spring-boot 的版本，例如 2.1.5.RELEASE；</li><li>点击 Next；</li></ol><h3 id="配置工程名和目录"><a href="#配置工程名和目录" class="headerlink" title="配置工程名和目录"></a>配置工程名和目录</h3><p><a href="https://img.alicdn.com/tfs/TB1HIayXUT1gK0jSZFhXXaAtVXa-805-525.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB1HIayXUT1gK0jSZFhXXaAtVXa-805-525.png" alt="img"></a></p><ol><li>设置工程名，例如 <code>dubbo-demo</code>；</li><li>设置工程目录，例如 <code>~/work/edas/dubbo-demo</code>；</li><li>点击 Finish；</li></ol><h3 id="创建完毕"><a href="#创建完毕" class="headerlink" title="创建完毕"></a>创建完毕</h3><p>此时 IDEA 将会创建一个新的工程，里面包含了一个完成 Dubbo Provider + Consumer 的样例工程。</p><p><a href="https://img.alicdn.com/tfs/TB12HyzXHj1gK0jSZFOXXc7GpXa-488-237.png" target="_blank" rel="noopener"><img src="https://img.alicdn.com/tfs/TB12HyzXHj1gK0jSZFOXXc7GpXa-488-237.png" alt="img"></a></p><h3 id="验证Apache-Dubbo工程"><a href="#验证Apache-Dubbo工程" class="headerlink" title="验证Apache Dubbo工程"></a>验证Apache Dubbo工程</h3><p>可以看到，创建出来的 Dubbo 样例工程是一个 Spring boot + Dubbo 的工程。服务端提供了一个<code>com.dubbo.example.DemoService</code>，通过 <code>dubbo</code> 协议暴露在 <code>12345</code> 端口。值得注意的是，由于默认<code>dubbo.registry.address=N/A</code>，这说明服务没有注册到任何注册中心，需要客户端通过直连的方式来发现服务。</p><h4 id="1-启动Provider"><a href="#1-启动Provider" class="headerlink" title="1. 启动Provider"></a>1. 启动Provider</h4><p>启动 <code>com.dubbo.example.provider.DubboProviderBootstrap#main</code>，观察标准输出中出现一下字样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-07-03 16:05:50.585  INFO 19246 --- [           main] c.d.e.provider.DubboProviderBootstrap    : Started DubboProviderBootstrap in 36.512 seconds (JVM running for 42.004)2019-07-03 16:05:50.587  INFO 19246 --- [pool-1-thread-1] .b.c.e.AwaitingNonWebApplicationListener :  [Dubbo] Current Spring Boot Application is await...</span><br></pre></td></tr></table></figure><p>这说明服务端已经成功启动。</p><h4 id="2-启动Consumer"><a href="#2-启动Consumer" class="headerlink" title="2. 启动Consumer"></a>2. 启动Consumer</h4><p>在消费端的<code>com.dubbo.example.consumer.DubboConsumerBootstrap</code>中，有如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Reference(version = &quot;1.0.0&quot;, url = &quot;dubbo://127.0.0.1:12345&quot;)private DemoService demoService;</span><br></pre></td></tr></table></figure><p>这表明消费端通过指定服务端地址<code>dubbo://127.0.0.1:12345</code>，通过直连方式调用服务。</p><p>启动<code>com.dubbo.example.consumer.DubboConsumerBootstrap#main</code>，观察服务端日志，出现如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello mercyblitz, request from consumer: /30.5.124.39:59553</span><br></pre></td></tr></table></figure><p>观察客户端日志，出现如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello mercyblitz, response from provider: 30.5.124.39:12345</span><br></pre></td></tr></table></figure><p>表明客户端调用成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一次，在最新的版本中，插件热情牵手了全国受欢迎的开源社区 Apache Dubbo，支持快速创建 RPC 框架 Dubbo 项目工程，并且将 Dubbo 应用快速部署到 EDAS（一个应用托管和微服务管理的PaaS平台） 上，同时支持本地服务和部署在 EDAS 上的服务之间互相调用。希望插件在拥抱开源的路上，服务好更多的开发者。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="测试1" scheme="http://www.pangadam.com/tags/%E6%B5%8B%E8%AF%951/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://www.pangadam.com/2019/09/23/%E6%B5%8B%E8%AF%95/"/>
    <id>http://www.pangadam.com/2019/09/23/测试/</id>
    <published>2019-09-23T14:27:20.000Z</published>
    <updated>2019-09-28T10:37:27.850Z</updated>
    
    <content type="html"><![CDATA[<p>xsaxhsauixhsaiuxsahxuhasxas</p><p>xasx</p><p>as</p><p>xas</p><p>x</p><p>sax</p><p>as</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123"</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;xsaxhsauixhsaiuxsahxuhasxas&lt;/p&gt;
&lt;p&gt;xasx&lt;/p&gt;
&lt;p&gt;as&lt;/p&gt;
&lt;p&gt;xas&lt;/p&gt;
&lt;p&gt;x&lt;/p&gt;
&lt;p&gt;sax&lt;/p&gt;
&lt;p&gt;as&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
    
      <category term="测试" scheme="http://www.pangadam.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
