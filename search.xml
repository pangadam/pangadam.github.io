<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[测试6]]></title>
    <url>%2F2019%2F09%2F28%2F%E6%B5%8B%E8%AF%956%2F</url>
    <content type="text"><![CDATA[不仅简化了 Dubbo 基于 xml 配置的方式，也提高了日常开发效率，甚至提升了工作幸福感。为了节省亲爱的读者您的时间，请根据以下2点提示来阅读本文，以提高您的阅读收获效率哦。 如果您只有简单的 Java 基础和 Maven 经验，而不熟悉 Dubbo，本文档将帮助您从零开始使用 Spring Boot 开发 Dubbo 服务，并使用 EDAS 服务注册中心实现服务注册与发现。 如果您熟悉 Dubbo，可以选择性地阅读相关章节。 为什么使用 Spring Boot 开发 Dubbo 应用Spring Boot 使用极简的一些配置，就能快速搭建一个基于 Spring 的应用，提高的日常的开发效率。因此，如果您使用 Spring Boot 来开发基于 Dubbo 的应用，简化了 Bubbo 基于 xml 配置的方式，提高了日常开发效率，提升了工作幸福感。 为什么使用 EDAS 服务注册中心EDAS 服务注册中心实现了 Dubbo 所提供的 SPI 标准的注册中心扩展，能够完整地支持 Dubbo 服务注册、路由规则、配置规则功能。 EDAS 服务注册中心能够完全代替 ZooKeeper 和 Redis，作为您 Dubbo 服务的注册中心。同时，与 ZooKeeper 和 Redis 相比，还具有以下优势： EDAS 服务注册中心为共享组件，节省了您运维、部署 ZooKeeper 等组件的机器成本。 EDAS 服务注册中心在通信过程中增加了鉴权加密功能，为您的服务注册链路进行了安全加固。 EDAS 服务注册中心与 EDAS 其他组件紧密结合，为您提供一整套的微服务解决方案。 本地开发准备工作 下载、启动及配置轻量级配置中心。 为了便于本地开发，EDAS 提供了一个包含了 EDAS 服务注册中心基本功能的轻量级配置中心。基于轻量级配置中心开发的应用无需修改任何代码和配置就可以部署到云端的 EDAS 中。 请您参考 配置轻量级配置中心 进行下载、启动及配置。推荐使用最新版本。 下载 Maven 并设置环境变量（本地已安装的可略过）。 创建服务提供者 创建一个 Spring Boot 工程，命名为 spring-boot-dubbo-provider。 这里我们以 Spring Boot 2.0.6.RELEASE 为例，在 pom.xml 文件中加入如下内容。 org.springframework.boot spring-boot-dependencies 2.0.6.RELEASE pom import org.springframework.boot spring-boot-starter-web org.springframework.boot spring-boot-actuator com.alibaba.boot dubbo-spring-boot-starter 0.2.0 com.alibaba.edas edas-dubbo-extension 1.0.0-SNAPSHOT 如果您需要选择使用 Spring Boot 1.x 的版本，请使用 Spring Boot 1.5.x 版本，对应的 com.alibaba.boot:dubbo-spring-boot-starter 版本为 0.1.0。 说明： Spring Boot 1.x 版本的生命周期即将在 2019 年 8 月 结束，推荐使用新版本开发您的应用。 2.开发 Dubbo 服务提供者 2.1 Dubbo 中服务都是以接口的形式提供的。因此需要开发一个接口，例如这里的 IHelloService，接口里有若干个可被调用的方法，例如这里的 SayHello 方法。 package com.alibaba.edas.boot; public interface IHelloService { String sayHello(String str);} 2.2 在服务提供方，需要实现所有以接口形式暴露的服务接口。例如这里实现 IHelloService 接口的类为 HelloServiceImpl。 package com.alibaba.edas.boot; import com.alibaba.dubbo.config.annotation.Service; @Service public class HelloServiceImpl implements IHelloService { public String sayHello(String name) { return &quot;Hello, &quot; + name + &quot; (from Dubbo with Spring Boot)&quot;; } } ``` **说明：** 这里的 Service 注解式 Dubbo 提供的一个注解类，类的全名称为：**com.alibaba.dubbo.config.annotation.Service** 。 2.3 配置 Dubbo 服务。在 application.properties/application.yaml 配置文件中新增以下配置： ```properties # Base packages to scan Dubbo Components (e.g @Service , @Reference) dubbo.scan.basePackages=com.alibaba.edas.boot dubbo.application.name=dubbo-provider-demo dubbo.registry.address=edas://127.0.0.1:8080 ``` **说明：** * 以上三个配置没有默认值，必须要给出具体的配置。* dubbo.scan.basePackages 的值是开发的代码中含有 com.alibaba.dubbo.config.annotation.Service 和 com.alibaba.dubbo.config.annotation.Reference 注解所在的包。多个包之间用逗号隔开。* dubbo.registry.address 的值前缀必须是一个 **edas://** 开头，后面的ip地址和端口指的是轻量版配置中心3.开发并启动 Spring Boot 入口类 ```java package com.alibaba.edas.boot; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DubboProvider { public static void main(String[] args) { SpringApplication.run(DubboProvider.class, args); } } 4.登录轻量版配置中心控制台 http://127.0.0.1:8080，在左侧导航栏中单击服务列表 ，查看提供者列表。可以看到服务提供者里已经包含了 com.alibaba.edas.IHelloService，且可以查询该服务的服务分组和提供者 IP。 创建服务消费者 创建一个 Spring Boot 工程，命名为 spring-boot-dubbo-]]></content>
      <categories>
        <category>分类测试</category>
      </categories>
      <tags>
        <tag>测试6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试5]]></title>
    <url>%2F2019%2F09%2F28%2F%E6%B5%8B%E8%AF%955%2F</url>
    <content type="text"><![CDATA[开源分布式事务中间件 Fescar 自1月10日上线v0.1版本以来，受到了开发者们的极大关注（watch299，star3604，fork799，社区讨论的issue79，数据统计于1月23日10:12），可见，天下苦分布式事务久矣。为此，我们收集了大家在社区（Github）和社群（钉钉群&amp;微信群）关注的核心问题，总结如下，并给出回复。 _2019_01_17_9_33_47 Q1：Fescar 的发展经历了哪些历程？和阿里云全局事务服务GTS之间是什么关系？ A1：阿里巴巴是国内最早一批进行应用分布式（微服务化）改造的企业，所以很早就遇到微服务架构下的分布式事务问题。 2014 年 阿里巴巴中间件团队发布TXC（Taobao Transaction Constructor），为集团内应用提供分布式事务服务。 2016 年 TXC 经过产品化改造，以GTS（Global TransactionService）的身份上线阿里云，成为当时业界唯一一款云上分布式事务产品，以阿里云公有云或专有云解决方案的形式，交付给众多外部客户。 2019 年 基于 TXC 和 GTS 的技术积累，阿里巴巴中间件团队发起了开源项目Fescar（Fast &amp; EaSy Commit And Rollback, FESCAR），和社区一起建设这个分布式事务解决方案。 TXC/GTS/Fescar一脉相承，为解决微服务架构下的分布式事务问题交出了一份与众不同的答卷。 Q2：Fescar 有哪些适用场景？ A2：Fescar 的愿景是让分布式事务的使用像现在本地事务的使用一样简单、高效，最终的目标是希望可以适用于所有的分布式事务场景。目前，核心的 AT 模式适用于构建于支持本地 ACID 事务的关系型数据库。非关系型数据库类资源的管理，通过 MT 模式来支持。AT 模式与 MT 模式完全兼容，所以可以在同一个分布式事务中，同时管理两类资源。 Q3：目前有已经有一些其他的分布式事务开源方案，Fescar 和他们之间有哪些区别？和JTA支持分布式事务有哪些区别？ A3：既有的分布式事务解决方案按照对业务侵入性分为两类，即：对业务无侵入的和对业务有侵入的。 业务无侵入的方案 既有的主流分布式事务解决方案中，对业务无侵入的只有基于 XA 的方案（注：问题中提到的 JTA 是XA 方案的 Java 版本），但应用XA 方案存在 3 个方面的问题： 1、要求数据库提供对 XA 的支持。如果遇到不支持 XA（或支持得不好，比如 MySQL 5.7 以前的版本）的数据库，则不能使用。 2、受协议本身的约束，事务资源（数据记录、数据库连接）的锁定周期长。长周期的资源锁定从业务层面来看，往往是不必要的，而因为事务资源的管理器是数据库本身，应用层无法插手。这样形成的局面就是，基于 XA 的应用往往性能会比较差，而且很难优化。 3、已经落地的基于 XA 的分布式解决方案，都依托于重量级的应用服务器（Tuxedo/WebLogic/WebSphere 等)，这是不适用于微服务架构的。 侵入业务的方案 实际上，最初分布式事务只有 XA 这个唯一方案。XA 是完备的，但在实践过程中，由于种种原因（包含但不限于上面提到的3 点）往往不得不放弃，转而从业务层面着手来解决分布式事务问题。比如： 基于可靠消息的最终一致性方案 TCC Saga 都属于这一类。这些方案的具体机制在这里不做展开，网上这方面的论述文章非常多。总之，这些方案都要求在应用的业务层面把分布式事务技术约束考虑到设计中，通常每一个服务都需要设计实现正向和反向的幂等接口。这样的设计约束，往往会导致很高的研发和维护成本。 不可否认，侵入业务的分布式事务方案都经过大量实践验证，能有效解决问题，在各行种业的业务应用系统中起着重要作用。但回到原点来思考，这些方案的采用实际上都是迫于无奈。 回到问题： 与基于消息的最终一致、TCC、Saga等业务逻辑侵入方案的不同在于，Fescar 的设计初衷就是保持对业务的非侵入性，不要求业务层面按照分布式事务的特定场景来设计正向和反向的两套（甚至多套）业务逻辑。这方面的差别就不展开了。 与 XA 的区别在于，设计了一套不同与 XA 的两阶段协议，在保持对业务不侵入的前提下，保证良好的性能，也避免了对底层数据库协议支持的要求。可以看作是一套轻量级的XA 机制。具体的差别如下： 架构层次 fescar XA方案的 RM 实际上是在数据库层，RM本质上就是数据库自身（通过提供支持 XA 的驱动程序来供应用使用）。 而 Fescar 的RM 是以二方包的形式作为中间件层部署在应用程序这一侧的，不依赖与数据库本身对协议的支持，当然也不需要数据库支持XA 协议。这点对于微服务化的架构来说是非常重要的：应用层不需要为本地事务和分布式事务两类不同场景来适配两套不同的数据库驱动。 这个设计，剥离了分布式事务方案对数据库在协议支持上的要求。 两阶段提交 先来看一下 XA 的2PC 过程。 fescar2 无论 Phase2 的决议是commit 还是 rollback，事务性资源的锁都要保持到Phase2 完成才释放。 再看 Fescar 的2PC 过程。 fescar3 分支事务中数据的 本地锁 由本地事务管理，在分支事务 Phase1 结束时释放。 同时，随着本地事务结束，连接 也得以释放。 分支事务中数据的 全局锁 在事务协调器侧管理，在决议 Phase2 全局提交时，全局锁马上 可以释放。只有在决议全局回滚的情况下，全局锁 才被持有至分支的 Phase2 结束。 这个设计，极大地减少了分支事务对资源（数据和连接）的锁定时间，给整体并发和吞吐的提升提供了基础。 Q4：Fescar 支持 Dubbo 的哪些版本？ A4：所有版本。 Q5：Fescar 支持 Spring Cloud么？ A5：Fescar 与微服务框架的接口点在于，需要把事务的唯一标识 XID（一个字符串）通过微服务框架的服务调用间调用的机制中，透明地传递，并通过 Fescar 的 API 来绑定（或解绑）到应用的线程上下文中。（机制可以参考内置的对 Dubbo 支持的实现 com.alibaba.fescar.dubbo.TransactionPropagationFilter）所以，本质上这个问题不是支不支持 Spring Cloud，而是如何支持 Spring Cloud 中选用的服务调用机制。目前正在和 Spring Cloud Alibaba 的同学合作，准备在v0.5.x版本（或更早）发布对 Spring Cloud默认的支持。同时，非常欢迎社区的朋友参与进来，贡献包括 Spring Cloud 在内的各类微服务框架的支持。 Q6：Fescar 是否支持本地跨库多数据源？除了关系型数据库，是否还支持NoSQL数据库？ A6：本地跨多数据源同样是支持的，在 Fescar 的架构中，同一个服务中的多个数据源与跨服务的多个数据源，没有本质区别。AT 模式目前仅限于对关系型数据库的支持（本身具备ACID 事务支持），后面会发布出来的 MT 模式可以支持 NoSQL 这类本身不具备本地事务支持的资源。 Q7：Fescar 现在开源的是AT模式，MT模式暂时不支持，什么时候会开源？ A7：当前 0.1.0 版本只是把 Fescar 最核心的 AT 模式的最小集发布出来，一方面是按开源的规划和架构的重构进展，另一方面也是希望通过最小集版本，让用户和开发者社区更容易理解到我们核心的设计思路，让更多人比较容易地参与进来建设，而不是完全由阿里巴巴主导，仅仅把我们的整套]]></content>
      <categories>
        <category>分类测试</category>
      </categories>
      <tags>
        <tag>测试5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试4]]></title>
    <url>%2F2019%2F09%2F28%2F%E6%B5%8B%E8%AF%954%2F</url>
    <content type="text"><![CDATA[减少故障的最好方法就是让故障经常性的发生。通过不断重复失败过程，持续提升系统的容错和弹性能力。那么，实施一次高效的混沌工程实验，需要几步呢？答案：2 步。① 登陆https://github.com/chaosblade-io/chaosblade② 下载 release 版本，打造故障演练专属工具- 正文开始 - 高可用架构是保障服务稳定性的核心。 阿里巴巴在海量互联网服务以及历年双11场景的实践过程中，沉淀出了包括全链路压测、线上流量管控、故障演练等高可用核心技术，并通过开源和云上服务的形式对外输出，以帮助企业用户和开发者享受阿里巴巴的技术红利，提高开发效率，缩短业务的构建流程。 例如，借助阿里云性能测试 PTS，高效率构建全链路压测体系，通过开源组件 Sentinel 实现限流和降级功能。这一次，经历了 6 年时间的改进和实践，累计在线上执行演练场景达数万次，我们将阿里巴巴在故障演练领域的创意和实践，浓缩成一个混沌工程工具，并将其开源，命名为 ChaosBlade。 ChaosBlade 是什么ChaosBlade 是一款遵循混沌工程实验原理，提供丰富故障场景实现，帮助分布式系统提升容错性和可恢复性的混沌工程工具，可实现底层故障的注入，特点是操作简洁、无侵入、扩展性强。 ChaosBlade 基于 Apache License v2.0 开源协议，目前有 chaosblade 和 chaosblade-exe-jvm 两个仓库。 chaosblade 包含 CLI 和使用 Golang 实现的基础资源、容器相关的混沌实验实施执行模块。chaosblade-exe-jvm 是对运行在 JVM 上的应用实施混沌实验的执行器。 ChaosBlade 社区后续还会添加 C++、Node.js 等其他语言的混沌实验执行器。 更多内容，参见项目及 Demo 体验地址： https://github.com/chaosblade-io 为什么要开源很多公司已经开始关注并探索混沌工程，渐渐成为测试系统高可用，构建对系统信息不可缺少的工具。但混沌工程领域目前还处于一个快速演进的阶段，最佳实践和工具框架没有统一标准。实施混沌工程可能会带来一些潜在的业务风险，经验和工具的缺失也将进一步阻止 DevOps 人员实施混沌工程。 混沌工程领域目前也有很多优秀的开源工具，分别覆盖某个领域，但这些工具的使用方式千差万别，其中有些工具上手难度大，学习成本高，混沌实验能力单一，使很多人对混沌工程领域望而却步。 阿里巴巴集团在混沌工程领域已经实践多年，将混沌实验工具 ChaosBlade 开源目的，是为了： 让更多人了解并加入到混沌工程领域； 缩短构建混沌工程的路径； 同时依靠社区的力量，完善更多的混沌实验场景，共同推进混沌工程领域的发展。 ChaosBlade 能解决哪些问题衡量微服务的容错能力通过模拟调用延迟、服务不可用、机器资源满载等，查看发生故障的节点或实例是否被自动隔离、下线，流量调度是否正确，预案是否有效，同时观察系统整体的 QPS 或 RT 是否受影响。在此基础上可以缓慢增加故障节点范围，验证上游服务限流降级、熔断等是否有效。最终故障节点增加到请求服务超时，估算系统容错红线，衡量系统容错能力。 验证容器编排配置是否合理通过模拟杀服务 Pod、杀节点、增大 Pod 资源负载，观察系统服务可用性，验证副本配置、资源限制配置以及 Pod 下部署的容器是否合理。 测试 PaaS 层是否健壮通过模拟上层资源负载，验证调度系统的有效性；模拟依赖的分布式存储不可用，验证系统的容错能力；模拟调度节点不可用，测试调度任务是否自动迁移到可用节点；模拟主备节点故障，测试主备切换是否正常。 验证监控告警的时效性通过对系统注入故障，验证监控指标是否准确，监控维度是否完善，告警阈值是否合理，告警是否快速，告警接收人是否正确，通知渠道是否可用等，提升监控告警的准确和时效性。 定位与解决问题的应急能力通过故障突袭，随机对系统注入故障，考察相关人员对问题的应急能力，以及问题上报、处理流程是否合理，达到以战养战，锻炼人定位与解决问题的能力。 功能和特点场景丰富度高ChaosBlade 支持的混沌实验场景不仅覆盖基础资源，如 CPU 满载、磁盘 IO 高、网络延迟等，还包括运行在 JVM 上的应用实验场景，如 Dubbo 调用超时和调用异常、指定方法延迟或抛异常以及返回特定值等，同时涉及容器相关的实验，如杀容器、杀 Pod。后续会持续的增加实验场景。 使用简洁，易于理解ChaosBlade 通过 CLI 方式执行，具有友好的命令提示功能，可以简单快速的上手使用。命令的书写遵循阿里巴巴集团内多年故障测试和演练实践抽象出的故障注入模型，层次清晰，易于阅读和理解，降低了混沌工程实施的门槛。 场景扩展方便所有的 ChaosBlade 实验执行器同样遵循上述提到的故障注入模型，使实验场景模型统一，便于开发和维护。模型本身通俗易懂，学习成本低，可以依据模型方便快捷的扩展更多的混沌实验场景。 ChaosBlade 的演进史 EOS（2012-2015）： 故障演练平台的早期版本，故障注入能力通过字节码增强方式实现，模拟常见的 RPC 故障，解决微服务的强弱依赖治理问题。 MonkeyKing（2016-2018）： 故障演练平台的升级版本，丰富了故障场景（如：资源、容器层场景），开始在生产环境进行一些规模化的演练。 AHAS（2018.9-至今）： 阿里云应用高可用服务，内置演练平台的全部功能，支持可编排演练、演练插件扩展等能力，并整合了架构感知和限流降级的功能。 ChaosBlade（2019.3）： 是 MonkeyKing 平台底层故障注入的实现工具，通过对演练平台底层的故障注入能力进行抽象，定义了一套故障模型。配合用户友好的 CLI 工具进行开源，帮助云原生用户进行混沌工程测试。 近期规划]]></content>
      <categories>
        <category>分类测试</category>
      </categories>
      <tags>
        <tag>测试4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试3]]></title>
    <url>%2F2019%2F09%2F28%2F%E6%B5%8B%E8%AF%953%2F</url>
    <content type="text"><![CDATA[自从我们团队在去年12月发布 Cloud Toolkit（一款让开发部署效率提速 8 倍的 IDE 插件）以来，已帮助数以万计的开发者们提高了云上的部署效率，期间，开发者们不仅积极地向 Cloud Toolkit 团队提出需求及优化建议，而且还热心地帮助别人进行答疑解惑。点击，了解更多，加入创造您的贡献类别包括但不限于以下形式：- 在钉钉或微信交流群里，热心帮助别答疑解惑- 提出新特性需求，并被采纳- 提出优化和改进建议，并被采纳- 上报 Bug，并被采纳- 推广插件，包括发朋友圈、发表文章、推荐给朋友等- 参与测评活动等等 ## 创始人计划 100**永久列入永久记录更大参与权益**## 双周排行榜 不仅如此，对于每两周贡献值排名前三的开发者，也进行同样的，还有喔～不管您在任何阶段参与贡献，都有机会荣登阿里云官网排行榜，我们诚邀您参与创造。 测评活动入口在此，即刻点击发声。点击参与 阿里巴巴中间件官方公众号 后续更新的活动都会发布在这里，如果您想第一时间了解最新活动详情、活动的动态、奖励机制，请记得要 mark 住我们的官网和公众号哦！此文章将持续不断地更新和记录排行榜信息，了解往期的排行榜详情，请往下看。 现在就加入【创造 Cloud Toolkit】，创造一款真正属于开发者的工具 您的任何建议、解答、需求都将有可能汇入这款工具的血液 您的任何参与、发声、见解都将有可能注入这款工具的灵魂 再也不要让工具左右你，现在我们要你定义自己的工具！]]></content>
      <categories>
        <category>分类测试</category>
      </categories>
      <tags>
        <tag>测试3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试2]]></title>
    <url>%2F2019%2F09%2F28%2F%E6%B5%8B%E8%AF%952%2F</url>
    <content type="text"><![CDATA[如何像参与开源那样，去参与一款 IDE 插件的设计？作为一款 IDE 插件的使用者，我是否能决定下一个版本的功能？自从产品经理银时小伙和他的开发小哥们在去年12月发布 Cloud Toolkit（一款 IDE 插件）以来，已帮助数以万计的开发者们提高了业务的部署效率。期间，开发者们不仅是 Cloud Toolkit 的使用者，同时也作为设计者参与了插件的更新迭代。 本文来自开发者徐靖峰，分享了他和 Cloud Toolkit 的故事 遇见 Cloud Toolkit在与中间件小姐姐的一次聊天中，偶然间了解到这款插件，小姐姐跟我提到自己正在运营一款 IDE 开发者工具，能够使开发部署效率提高 8 倍，出于好奇心，我就上手体验了一下，看看究竟是一个什么样的产品。使用了一段时间之后，便迫不及待地向小姐姐分享了我作为开发者对插件的一些看法。 我对这款产品最直观的感受：这是一款发布工具，帮助用户在 IDE 中直接打包应用并部署到各种终端。一开始看到这款产品位于阿里云的页面中，原本以为是一款和阿里云服务强绑定的产品，但试用过后才发现，即使对于普通的云主机，也非常适用，还可以解决很多开发运维的痛点，非阿里云用户可以放心使用。 在 Cloud Toolkit 出现之前作为一个 Java 程序员，我们大多数会在 Intellij IDEA 中基于 SpringBoot 来开发 WEB 应用，所以本文中的测评将会基于以下几个架构来构建： 开发环境：IDEA 项目组织方式：Maven 开发框架：SpringBoot 在接触 Cloud Toolkit 之前，用什么方法来部署一个 SpringBoot 应用呢？作为一个偏正经的测评人员，我不会为了凸显出 Cloud Toolkit 的强大而去翻出一些上古的部署工具来做对比，而是直接使用 Intellij IDEA 的内置功能与之对比。 第一步：配置服务器信息Deployment 插件 在 Tools -&gt; Deployment 中找到 IDEA 对项目部署支持的内置插件，我们可以在其中进行服务器信息的配置，包括服务器地址和权限认证，并且在 Mapping 选项卡中完成本地工程与服务器路径的映射。 第二步：配置 Maven 打包插件1&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 由于是 SpringBoot 应用，配置专用的打包插件后，可以将整个工程打成一个 fatjar，示例工程非常简单： 1@SpringBootApplication@RestControllerpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125; @RequestMapping(&quot;/hello&quot;) public String hello() &#123; return &quot;hello world~~~~~~~~~~~~~~~~&quot;; &#125;&#125; 之后，只要执行 install，即可得到一个可运行的 jar 包： 打包 第三步：部署 jar 包部署 由于我们在第一步已经配置过项目路径与服务器路径的映射，可以选择直接对 fatjar 右键，upload 到远程服务器上。 第四步：启动应用启动 上图中展示的是 IDEA 中两个非常棒的内置功能，可以在 Tools -&gt; Start SSH session 中开启远程服务器的终端，在 IDEA 下方可以执行远程指令；也可以在 Tools -&gt; Deployment -&gt;Browse Remote Host 中展开如图右侧的结构，可视化地浏览服务器上的文件列表，检查应用是否部署成功。 在远程终端中，找到对应的 fatjar，执行 java -jar spring-demo-1.0-SNAPSHOT.jar 便完成了整个部署流程。 IDEA 内置插件总结IDEA 内置插件已经提供了相当强大的能力，整个部署过程我们完全没有离开 IDEA！避免了频繁切换窗口，装各种部署工具，可以说已经很方便了，Cloud Toolkit 必须要比这个部署过程做的更加强大才行，那下面就让我们来体验下 Cloud Toolkit 是怎么优化的吧。 Cloud Toolkit 初体验我们不急着用 Cloud Toolkit 来部署应用。虽然笔者是一位开发者，但还是从产品的角度来研究下它的菜单项，看看它的产品定位。IDEA 安装插件的过程省略，详情可以参考《IDE 插件新版发布 | 支持更多场景，开发效率更“biu”了》。 多种部署方式 其他菜单项暂且抛到一边，这 5 个核心能力应该就是 Cloud Toolkit 的核心了。 即使作为一个插件小白，应该也能够望名知意，猜到这几个菜单对应的功能： Deploy to Host：部署到任意服务器。这一个功能决定了 Cloud Toolkit 强大的之处就是可以使得每个开发者受益，它其实并不是和阿里云厂商强绑定的。我会在下文重点测评下这个功能。 Deploy to ECS：这里的 ECS 指的阿里云的 ECS，如果你的服务部署在阿里云 ECS 上，可以选择使用这个功能，获得比 Deploy to Host 更加丰富的功能。在下文我也会简单测评下这个功能。 Deploy to EDAS &amp; EDAS Serverless：EDAS &amp; EDAS Serverless 是阿里云提供的分布式服务治理服务，可以理解为商业版的 Dubbo，具有强大的服务治理、服务调度能力，Cloud Toolkit 对 EDAS 做了个性化的部署支持，让使用者无需登录控制台，在 IDEA 中即可完成 EDAS 的部署。 Deploy to CS K8S：在云原生时代，很多应用使用容器化的方式进行部署，Cloud Toolkit 这一点做的还是不错的，已经具备了容器化部署的能力，具有一定的前瞻性。 其实从简单的功能介绍就可以看出，Cloud Toolkit 相比 IDEA 内置的部署能力的确是高出一大截了，甚至可以说，Deploy to Host 这一能力完全就可以覆盖 IDEA 插件的所有能力，并且对流程还进行了一些简化。下面我重点测评下 Deploy to Host 这一能力，与之前的部署流程进行一个对比。 使用 Cloud Toolkit 把应用部署到任意服务器Deploy to Host 上图展示的 Deploy to Host 功能的配置项，实际上涵盖了以下几点： 远程服务器配置 部署方式：Maven 构建，直接上传文件（目前还不支持 Gradle 构建，可能在后续的版本会支持） 本地文件与服务器路径的映射配置 启动脚本的集成 账号管理SSH 登录账户可以在 Preferences -&gt; Alibaba Cloud Toolkit -&gt; SSH Profile 中管理，找不到也没关系，需要设置的时候一般都会有超链接跳转，这点做得很人性化。]]></content>
      <categories>
        <category>分类测试</category>
      </categories>
      <tags>
        <tag>测试2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试1]]></title>
    <url>%2F2019%2F09%2F28%2F%E6%B5%8B%E8%AF%951%2F</url>
    <content type="text"><![CDATA[这一次，在最新的版本中，插件热情牵手了全国受欢迎的开源社区 Apache Dubbo，支持快速创建 RPC 框架 Dubbo 项目工程，并且将 Dubbo 应用快速部署到 EDAS（一个应用托管和微服务管理的PaaS平台） 上，同时支持本地服务和部署在 EDAS 上的服务之间互相调用。希望插件在拥抱开源的路上，服务好更多的开发者。 7月22日晚上 8：00-9：00，中间件小姐姐软萌音直播，让你开发部署提速 8 倍！点击进入直播间 自从产品经理银时小伙和他的团队在去年11月发布 Cloud Toolkit（一款 IDE 插件）以来，已帮助数以万计的开发者们提高了开发、测试、诊断以及应用部署效率。期间，他们还发布了 Contributor Ranking List，和开发者们一同定义、打造好用的 IDE 插件。 下文将为大家演示如何利用 Cloud Toolkit 快速创建 Apache Dubbo 工程，以及运行并验证这个样例工程的可执行性。 如何安装 cloud Toolkit 插件 本文使用 IntelliJ IDEA 在 MAC 下进行安装： 打开 IntelliJ IDEA -&gt; Preference，在弹出的框里面选择插件； 在输入框中输入 Alibaba Cloud Toolkit； 在搜索结果中点击安装； 由于网络原因，可能会出现搜索不到的情况，请多尝试几次，或使用离线安装包进行下载。（点击“阅读原文”，免费下载） 安装完毕，重启 IntelliJ IDEA，再次访问 Preference, 可以看到左侧菜单出现了 Alibaba Cloud Toolkit，在已安装的插件里面也能找到。 如何创建 Apache Dubbo 工程新建工程 打开 File -&gt; New -&gt; Project； 在弹出的对话框中选择 Apache Dubbo； 选择对应的 JDK 版本； 点击 next； 设置工程基本配置 选择 maven 项目； 输入相应的 groupID，例如 com.dubbo.example； 输入 ArtifactId，例如 dubbo-demo； 输入 Version，例如 1.0-SNAPSHOT； 选择 Dubbo 的版本，例如 2.7.2； 勾选要创建的种类，勾选 Consumer 和 Provider，则会相应创建出服务提供者和服务消费者的代码； 选择 Spring-boot 的版本，例如 2.1.5.RELEASE； 点击 Next； 配置工程名和目录 设置工程名，例如 dubbo-demo； 设置工程目录，例如 ~/work/edas/dubbo-demo； 点击 Finish； 创建完毕此时 IDEA 将会创建一个新的工程，里面包含了一个完成 Dubbo Provider + Consumer 的样例工程。 验证Apache Dubbo工程可以看到，创建出来的 Dubbo 样例工程是一个 Spring boot + Dubbo 的工程。服务端提供了一个com.dubbo.example.DemoService，通过 dubbo 协议暴露在 12345 端口。值得注意的是，由于默认dubbo.registry.address=N/A，这说明服务没有注册到任何注册中心，需要客户端通过直连的方式来发现服务。 1. 启动Provider启动 com.dubbo.example.provider.DubboProviderBootstrap#main，观察标准输出中出现一下字样： 12019-07-03 16:05:50.585 INFO 19246 --- [ main] c.d.e.provider.DubboProviderBootstrap : Started DubboProviderBootstrap in 36.512 seconds (JVM running for 42.004)2019-07-03 16:05:50.587 INFO 19246 --- [pool-1-thread-1] .b.c.e.AwaitingNonWebApplicationListener : [Dubbo] Current Spring Boot Application is await... 这说明服务端已经成功启动。 2. 启动Consumer在消费端的com.dubbo.example.consumer.DubboConsumerBootstrap中，有如下代码： 1@Reference(version = &quot;1.0.0&quot;, url = &quot;dubbo://127.0.0.1:12345&quot;)private DemoService demoService; 这表明消费端通过指定服务端地址dubbo://127.0.0.1:12345，通过直连方式调用服务。 启动com.dubbo.example.consumer.DubboConsumerBootstrap#main，观察服务端日志，出现如下内容： 1Hello mercyblitz, request from consumer: /30.5.124.39:59553 观察客户端日志，出现如下内容： 1Hello mercyblitz, response from provider: 30.5.124.39:12345 表明客户端调用成功。]]></content>
      <tags>
        <tag>测试1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2019%2F09%2F23%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[xsaxhsauixhsaiuxsahxuhasxas xasx as xas x sax as 1String str = "123";]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
